; to move 0xFE200000 into r8 and 0xFE201000 into r9
; (because the constant doesn't fit into one)

; move 0xFE20 << 16 into r8
; 1 1 0 1 0 0 1 0 1 hw2 imm16 Rd5
; Rd <= imm << hw*16
; r8 <= 0xFE20 << 1*16
; 1 1 0 1 0 0 1 0 1 01 1111 1110 0010 0000 01000
; 11010010 10111111 11000100 00001000
; now, reverse the bytes:
00001000 11000100 10111111 11010010

; add 0x1000 to r8 to move 0xFE201000 into r9
; 1 0 0 1 0 0 0 1 0 shift1 uimm12 Rn5 Rd5
; Rd <= Rn + (uimm << (shift ? 12 : 0))
; r9 <= r8 + (0x1 << (1 ? 12 : 0))
; 1 0 0 1 0 0 0 1 0 1 0000 0000 0001 01000 01001
; 10010001 01000000 00000101 00001001
; now, reverse the bytes:
00001001 00000101 01000000 10010001

; disable UART
; store 0x0 into *(r9+0x30)
; 1 1 1 1 1 0 0 0 0 0 0 imm9 1 1 Rn5 Rt5
; *(Rt + imm) <= Rn
; *(r9 + 0x30) <= r31
; 1 1 1 1 1 0 0 0 0 0 0 000110000 1 1 11111 01001
; 11111000 00000011 00001111 11101001
; now, reverse the bytes:
11101001 00001111 00000011 11111000

; disable GPIO pin pull up/down
; store 0x0 into *(r8+0x94)
; 1 1 1 1 1 0 0 0 0 0 0 imm9 1 1 Rn5 Rt5
; *(Rt + imm) <= Rn
; *(r8 + 0x94) <= r31
; 1 1 1 1 1 0 0 0 0 0 0 010010100 1 1 11111 01000
; 11111000 00001001 01001111 11101000
; now, reverse the bytes:
11101000 01001111 00001001 11111000


; delay for 150 cycles

;; move 150 into r7
;; subtract 1 from r7
;; compare
;; if we're above zero, jump back two instructions

; disable GPIO pin pull up/down clock 0
; store 0x0 into *(r8+0x98)

; delay for 150 cycles

; disable GPIO pin pull up/down clock 0
; store 0x0 into *(r8+0x98)

; clear all pending interrupts
; store 0x0 into *(r9+0x1044)

; set baud rate to 115200 given a 3 Mhz clock
; BDR = (3 000 000)/(16 * 115200) = 1.6276
; BDR_F = 0.6276
; BDR_I = 1 = 0x1
; m = int((0.6276*64)+0.5) = 40 = 0x28

;; store 0x1 into *(r9+0x24)

;; store 0x28 into *(r9+0x28)

; enable FIFO and 8-bit data transmission
; store 0111 0000 into *(r9+0x2C)

; mask all interrupts
; store 11 1111 0010 into *(r9+0x38)

; enable UART, transfer, and receive
; store 000 0001 1000 0001 into *(r9+0x30)




; wait for UART flags register *(r9+0x18) to say we're ready to read

; read into r3

; wait for UART flags register *(r9+0x18) to say we're ready to write

; store r3 into *(r9+0)
