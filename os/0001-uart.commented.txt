; store `0x78` (ASCII `x`) into r0
; 1 1 0 1 0 0 1 0 1 hw2 imm16 Rd5
; Rd <= imm << hw*16
; r0 <= 0x78 << 0*16
; 1 1 0 1 0 0 1 0 1 00 0000 0000 0111 1000 00000
; 11010010 10000000 00001111 00000000
; now, reverse the bytes:
00000000 00001111 10000000 11010010

; to move 0xFE201000 into r1, we need two instructions
; (because the constant doesn't fit into one)

;; 1. move 0xFE20 << 16 into r1
; 1 1 0 1 0 0 1 0 1 hw2 imm16 Rd5
; Rd <= imm << hw*16
; r1 <= 0xFE20 << 1*16
; 1 1 0 1 0 0 1 0 1 01 1111 1110 0010 0000 00001
; 11010010 10111111 11000100 00000001
; now, reverse the bytes:
00000001 11000100 10111111 11010010

;; 2. add 0x1000 to r1
; 1 0 0 1 0 0 0 1 0 shift1 uimm12 Rn5 Rd5
; Rd <= Rn + (uimm << (shift ? 12 : 0))
; r1 <= (r1 + (0x1 << (1 ? 12 : 0)))
; 1 0 0 1 0 0 0 1 0 1 0000 0000 0001 00001 00001
; 10010001 01000000 00000100 00100001
; now, reverse the bytes:
00100001 00000100 01000000 10010001

; store r0 into *r1 
; 1 1 1 1 1 0 0 0 0 0 0 imm9 1 1 Rn5 Rt5
; *(Rt + imm) <= Rn
; *(r1 + 0) <= r0
; 1 1 1 1 1 0 0 0 0 0 0 000000000 1 1 00001 00000
; 11111000 00000000 00001100 00100000
; now, reverse the bytes:
00100000 00001100 00000000 11111000
