// AArch64 mode
 
// To keep this in the first portion of the binary.
.section ".text.boot"
 
// Make _start global.
.globl _start
 
    .org 0x80000
// Entry point for the kernel. Registers are not defined as in AArch32.
_start:
    // read cpu id, stop slave cores
    mrs     x1, mpidr_el1
    and     x1, x1, #3
    cbz     x1, 2f
    // cpu id > 0, stop
1:  wfe
    b       1b
2:  // cpu id == 0
 
    // set stack before our code
    ldr     x1, =_start
    mov     sp, x1
 
    // clear bss
    ldr     x1, =__bss_start
    ldr     w2, =__bss_size
3:  cbz     w2, 4f
    str     xzr, [x1], #8
    sub     w2, w2, #1
    cbnz    w2, 3b
 
    // Disable UART0.
4:  
    // mov r1, 0xFE201030
    // mov r0, 0x00000000
    // str r0, [r1]

    // // Disable pull up/down for all GPIO pins & delay for 150 cycles.
    // mov r1, 0xFE200094
    // str r0, [r1]


    // mov r2, #150
    // bl delay

    // ; mov r1, 0xFE200000
    // ; mov r0, 0xC000
    // ; str r0, [r1]


    // ; mov r1, 0xFE201018
    // ; ldr r0, [r1]
    // bl uart_wait_write

    // mov x1,     #0xFE000000
    // orr x1, x1, #0x00200000
    // orr x1, x1, #0x00001000

    // mov x0, #0x79
    // str w0, [x1]

    b read_write

    // bl uart_wait



    // jump to C code, should not return
    // bl      kernel_main
    // for failsafe, halt this core too
    // b 1b


//delay:
//    subs r0, r0, #1
//    bne delay

uart_wait:
    mov x1,     #0xFE000000
    orr x1, x1, #0x00200000
    orr x1, x1, #0x00001000
    orr x1, x1, #0x00000018
    ldr w0, [x1]
    cmp w0, w3
    beq uart_wait
    ret

read_write:
    mov w3, #0x10
    bl uart_wait
    mov x1,     #0xFE000000
    orr x1, x1, #0x00200000
    orr x1, x1, #0x00001000
    ldr w2, [x1]
    mov w3, #0x20
    bl uart_wait
    mov x1,     #0xFE000000
    orr x1, x1, #0x00200000
    orr x1, x1, #0x00001000
    str w2, [x1]
    b read_write
