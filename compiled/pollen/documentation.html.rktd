((3) 0 () 0 () () (u . "<html>\n<head>\n        <meta charset=\"UTF-8\"/>\n        <link href=\"https://fonts.googleapis.com/css?family=Crimson+Text&display=swap\" rel=\"stylesheet\">\n        <style>\n                * {\n                        font-family: 'Crimson Text', serif;\n                }\n                #sidebar {\n                        position: absolute;\n                        left: 2em;\n                        font-weight: bold;\n                }\n                a {\n                        color: #3467ff;\n                }\n\n                th:nth-of-type(2) {\n                        text-align: left;\n                }\n\n                td,th{\n                        border-left: 10px solid rgba(0,0,0,0);\n                }\n\n                tr td:first-child, tr th:first-child {\n                        text-align: right;\n                        border:0px;\n                }\n                abbr {\n                        font-family: inherit;\n                        text-decoration: underline;\n                }\n            code {\n                font-family: monospace;\n                font-size: 14px;\n                background: #dcdcf9;\n                border-radius: 5px;\n                padding-left: 4px;\n                padding-right: 4px;\n            }\n            a {\n                text-decoration: none;\n            }\n                        p, li {\n                                font-size: 19px;\n                        }\n                        p {\n                                margin-bottom: 0.5em;\n                        }\n                        ol {\n                                margin-top: 0;\n                        }\n            #toc div a span {\n                display: none;\n            }\n            pre {\n                font-family: monospace;\n                white-space: pre-line;\n                padding: 1em;\n                border-radius: 3px;\n                background-color: #dcdcf9;\n            }\n                body {\n                        margin-left: 20em;\n                        margin-top: 5%;\n                        width: 60%;\n                        padding-bottom: 5em;\n                }\n\n                .nav3 {padding-left: 1em;}\n                .nav4 {padding-left: 2em;}\n                .nav5 {padding-left: 3em;}\n                .nav6 {padding-left: 4em;}\n\n                 body {counter-reset: h2}\n                h2, .nav2 {counter-reset: h3}\n                h3, .nav3 {counter-reset: h4}\n                h4, .nav4 {counter-reset: h5}\n                h5, .nav5 {counter-reset: h6}\n\n                h2:before, .nav2:before {counter-increment: h2; content: counter(h2) \". \"}\n                h3:before, .nav3:before {counter-increment: h3; content: counter(h2) \".\" counter(h3) \". \"}\n                h4:before, .nav4:before {counter-increment: h4; content: counter(h2) \".\" counter(h3) \".\" counter(h4) \". \"}\n                h5:before, .nav5:before {counter-increment: h5; content: counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \". \"}\n                h6:before, .nav6:before {counter-increment: h6; content: counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \".\" counter(h6) \". \"; counter-increment: h4counter; }\n                #toc a, .nav2:before, .nav3:before, .nav4:before, .nav5:before, .nav6:before {\n                        color: #404040;\n                }\n\n                #reset-counter {\n                        counter-reset: h2;\n                }\n\n        </style>\n</head>\n<body style=\"background: #f6f6f6\">\n        <div id=\"sidebar\">\n                <div id=\"pages\">\n                        Introduction<br>\n                        Machine Code<br>\n                        Assembly<br>\n                        Stack Language<br>\n                        Curly Braces<br>\n                        <br>\n                        Documentation\n                </div>\n                <div id=\"toc\"><div class=\"nav2\"><a href=\"#g127596\">Terminology</a></div><div class=\"nav2\"><a href=\"#g127597\">Peripherals</a></div><div class=\"nav3\"><a href=\"#g127598\">UART</a></div><div class=\"nav4\"><a href=\"#g127599\">External Documentation</a></div><div class=\"nav4\"><a href=\"#g127600\">Setup Procedure</a></div><div class=\"nav4\"><a href=\"#g127601\">Writing</a></div><div class=\"nav4\"><a href=\"#g127602\">Reading</a></div><div class=\"nav2\"><a href=\"#g127603\">Machine Code Overview</a></div><div class=\"nav3\"><a href=\"#g127604\">Encoding</a></div><div class=\"nav3\"><a href=\"#g127605\">Registers</a></div><div class=\"nav3\"><a href=\"#g127606\">Constants</a></div><div class=\"nav2\"><a href=\"#g127607\">Machine Code Operations</a></div><div class=\"nav3\"><a href=\"#g127608\">Register Movement</a></div><div class=\"nav4\"><a href=\"#g127609\">From Constant</a></div><div class=\"nav4\"><a href=\"#g127610\">From Register</a></div><div class=\"nav4\"><a href=\"#g127611\">From System Register</a></div><div class=\"nav3\"><a href=\"#g127612\">Logical Operations</a></div><div class=\"nav4\"><a href=\"#g127613\">Register-based</a></div><div class=\"nav4\"><a href=\"#g127614\">And, immediate</a></div><div class=\"nav4\"><a href=\"#g127615\">Or</a></div><div class=\"nav4\"><a href=\"#g127616\">Xor</a></div><div class=\"nav3\"><a href=\"#g127617\">Arithmetic Operations</a></div><div class=\"nav4\"><a href=\"#g127618\">Add</a></div><div class=\"nav4\"><a href=\"#g127619\">Add, immediate</a></div><div class=\"nav4\"><a href=\"#g127620\">Sub</a></div><div class=\"nav3\"><a href=\"#g127621\">Memory Operations</a></div><div class=\"nav4\"><a href=\"#g127622\">Store, pre-index</a></div></div>\n        </div>\n<span id=\"reset-counter\"></span>\n  <p>Almost everything you'll need is in the <a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=1&amp;zoom=auto,-54,848\">ARMv8 Architecture Reference Manual</a> and <a href=\"https://static.docs.arm.com/100095/0003/cortex_a72_mpcore_trm_100095_0003_05_en.pdf#page=1&amp;zoom=auto,-54,848\">Cortex-72A Processor Technical Reference Manual</a>. I highly recommend downloading a copy of each PDF. Some of their contents are reproduced below.</p><h2 id=\"g127596\">Terminology </h2><p>These are the search terms you're looking for.</p><table><tr><th>Term</th>\n  <th>Definition</th></tr>\n  <tr><td>cortex-72a</td>\n  <td>the processor used by the Raspberry Pi 4</td></tr>\n  <tr><td>broadcom bcm2711</td>\n  <td>same as above, for our purposes (???)</td></tr>\n  <tr><td>instruction encoding</td>\n  <td>the encoding for translating assembly into machine code</td></tr></table><h2 id=\"g127597\">Peripherals </h2><p>Many peripherals (external io stuff) are accessible through special memory addresses. The Raspberry Pi 4's peripherals document has not yet been released, so for now we'll use the RPi 3's <a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=1&amp;zoom=auto,-54,848\">BCM2835 ARM Peripherals Manual</a>.</p><h3 id=\"g127598\">UART </h3><h4 id=\"g127599\">External Documentation </h4><ul><li><a href=\"http://infocenter.arm.com/help/topic/com.arm.doc.ddi0183g/DDI0183G_uart_pl011_r1p5_trm.pdf#page=47&amp;zoom=auto,-29,502\">PrimeCell UART Technical Reference Manual</a></li>\n  <li><a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=175&amp;zoom=110,-110,807\">BCM2835 ARM Peripherals, Page 175</a></li>\n  <li><a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=177&amp;zoom=110,-110,280\">UART Register addresses</a>, with offset <code>0xFE201000</code> on raspi4</li></ul><h4 id=\"g127600\">Setup Procedure </h4><p>This can be skipped on QEMU, but I recommend implementing the hardware setup procedure as promptly as possible.</p><p>For the following setup steps, use the BCM2836 Peripheral Manual's <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=90&amp;zoom=110,-110,652\">GPIO address section</a>, replacing <code>0x7E20</code> with <code>0xFE20</code> for raspi4.  Also see the manual's <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=177&amp;zoom=110,-110,280\">UART address section</a>.</p><ol><li>disable UART using the <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=185&amp;zoom=110,-110,325\">UART control register</a></li>\n  <li>disable GPIO pin pull up/down</li>\n  <li>delay for 150 cycles (create a loop with a countdown)</li>\n  <li>disable GPIO pin pull up/down clock 0</li>\n  <li>delay for 150 cycles</li>\n  <li>disable GPIO pin pull up/down clock 0 (yeah, again; idk why)</li>\n  <li>clear all pending interrupts using the <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=192&amp;zoom=110,-70,735\">UART interrupt clear register</a> (write zero to the bits representing each interrupt you want to clear)</li>\n  <li>set baud rate to 115200 given a 3 Mhz clock (follow the PrimeCell UART Manual's <a href=\"http://infocenter.arm.com/help/topic/com.arm.doc.ddi0183g/DDI0183G_uart_pl011_r1p5_trm.pdf#page=56&amp;zoom=auto,-29,199\">baud rate calculation example</a>)\n  <ul><li>write the baud rate divisor integer (<code>BDR_I</code>) to the <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=183&amp;zoom=110,-70,479\">UART integer baud rate divisor register</a></li>\n  <li>write the calculated fractional part (<code>m</code>) to the <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=183&amp;zoom=110,-110,255\">UART fractional baud rate divisor register</a></li></ul></li>\n  <li>enable FIFO and 8-bit data transmission using the <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=184&amp;zoom=110,-70,645\">UART line control register</a></li>\n  <li>mask all interrupts using the <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=188&amp;zoom=110,-70,603\">interrupt mask set/clear register</a></li>\n  <li>enable UART, transfer, and receive using the <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=185&amp;zoom=110,-110,325\">UART control register</a></li></ol><h4 id=\"g127601\">Writing </h4><p>UART data can be sent by storing ASCII-encoded text in <code>0xFE201000</code>.</p><p>On real hardware, you'll want to...</p><h4 id=\"g127602\">Reading </h4><h2 id=\"g127603\">Machine Code Overview </h2><h3 id=\"g127604\">Encoding <span>(<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=223&amp;zoom=auto,-4,576\">pg 223</a>)</span></h3><p>Very few people venture below assembly to machine code, so most machine code is described in terms of the equivalent assembly.</p><p>For example, let's say we wanted to execute <code>r7 &lt;= r2 + 16</code>.</p><p>Once we find the <code>add</code> instruction in the ARMv8 Manual (<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=531&amp;zoom=auto,-4,730\">pg 531</a>) or via the documentation below, we see that the encoding for 64-bit <code>add</code> is as follows:</p><pre>sf 0 0 1 0 0 0 1 shift2 imm12 Rn Rd</pre><p>Note the numbers after some variable names; they indicate how many bits wide their encodings are.</p><p>In our case, to do <code>r7 &lt;= r2 + 16</code>, we calculate the following:</p><pre>sf = 1\n  shift = 00\n  imm = 000000010000\n  Rn = r2 = 00010\n  Rd = r7 = 00111</pre><p>Therefore, our fully encoded instruction is: (whitespace added for clarity)</p><pre>1 0 0 1 0 0 0 1 00 000000010000 00010 00111</pre><h3 id=\"g127605\">Registers <span>(<a href=\"https://static.docs.arm.com/100095/0003/cortex_a72_mpcore_trm_100095_0003_05_en.pdf#page=75&amp;zoom=auto,-12,749\">pg 75</a>)</span></h3><p>These are the fastest place to store data. Most machine code instructions involve registers and moving data to/from/between them.</p><table><tr><th>Register</th>\n  <th>Description</th></tr>\n  <tr><td><a href=\"https://static.docs.arm.com/100095/0003/cortex_a72_mpcore_trm_100095_0003_05_en.pdf#page=90&amp;zoom=auto,-12,258\"><code>MPIDR_EL1</code></a></td>\n  <td>This read-only identification register, among other things, provides a core identification number (<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=2620&amp;zoom=110,-33,627\">how to access</a>)</td></tr>\n  <tr><td><code>r0</code> to <code>r15</code></td>\n  <td>General-purpose registers. Because we're writing our own assembly language, feel free to use these however you want</td></tr>\n  <tr><td><code>r31</code> or <code>SP</code></td>\n  <td>Depending on the instruction, this is either the stack pointer or a register that always reads zero and discards data when written</td></tr></table><h3 id=\"g127606\">Constants <span>(\"immediate\" values)</span></h3><p>The aarch64 instruction encoding is 32 bits wide, so we cannot store large constants into registers in a single command. Instead, we use multiple commands to store the constant, such as <code>mov</code> with a bit shift followed by one or more <code>add</code> instructions.</p><h2 id=\"g127607\">Machine Code Operations <span>(<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=224&amp;zoom=auto,-4,745\">pg 224</a>)</span></h2><p>Every operation that you'll need should be in this document. There are plenty more operations out there, but for the purposes of this book, we'll only learn the basics. This is a tradeoff of efficiency (using the minimal number of instructions) verus simplicity.</p><table><tr><th>Term</th>\n  <th>Definition</th></tr>\n  <tr><td>immediate</td>\n  <td>constant</td></tr>\n  <tr><td><code>imm</code></td>\n  <td>signed immediate</td></tr>\n  <tr><td><code>uimm</code></td>\n  <td>unsigned immediate</td></tr></table><h3 id=\"g127608\">Register Movement </h3><p>This instruction family copies into a register either a constant or the value of another register.</p><h4 id=\"g127609\">From Constant <span>(<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=226&amp;zoom=auto,-4,435\">pg 226</a>)</span></h4><pre>1 1 0 1 0 0 1 0 1 hw2 imm16 Rd5\n  Rd &lt;= imm &lt;&lt; hw*16</pre><h4 id=\"g127610\">From Register <span>(<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=723&amp;zoom=auto,-4,723\">pg 723</a>)</span></h4><pre>1 0 0 1 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 Rn5 Rd5\n  (Rd or *SP) &lt;= (Rn or *SP)</pre><h4 id=\"g127611\">From System Register <span>(<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=802&amp;zoom=auto,-54,848\">pg 802</a>)</span></h4><p>See the register summaries above for the parameters needed to access a specific system register.</p><h3 id=\"g127612\">Logical Operations <span>(<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=270&amp;zoom=auto,-4,358\">pg 270</a>)</span></h3><p>Using constants in logical aarch64 operations can be <a href=\"https://news.ycombinator.com/item?id=16272350\">surprisingly complex</a>, so we'll only use logical operations between registers.</p><p>I won't explain all of these here, but know that <code>xor</code> is also known as <code>eor</code>.</p><pre>1 opc2 0 1 0 1 0 shift2 N Rm5 imms6 Rn6 Rd5</pre><table><tr><th>opc</th>\n  <th>instruction</th></tr>\n  <tr><td><code>00</code></td>\n  <td>AND</td></tr>\n  <tr><td><code>01</code></td>\n  <td>OR</td></tr>\n  <tr><td><code>10</code></td>\n  <td>XOR</td></tr></table><h4 id=\"g127613\">Register-based </h4><h4 id=\"g127614\">And, immediate </h4><h4 id=\"g127615\">Or </h4><h4 id=\"g127616\">Xor </h4><h3 id=\"g127617\">Arithmetic Operations </h3><h4 id=\"g127618\">Add <span>(<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=533&amp;zoom=auto,-4,733\">pg 533</a>)</span></h4><h4 id=\"g127619\">Add, immediate <span>(<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=531&amp;zoom=auto,-4,730\">pg 531</a>)</span></h4><pre>1 0 1 0 0 0 1 0 shift1 uimm12 Rn5 Rd5\n  Rd &lt;= (Rn + (uimm &lt;&lt; (shift ? 12 : 0)))</pre><table><tr><td>shift</td>\n  <td>If one, <code>uimm</code> is shifted 12 bits to the left</td></tr>\n  <tr><td>uimm</td>\n  <td>Unsigned constant integer</td></tr></table><h4 id=\"g127620\">Sub </h4><h3 id=\"g127621\">Memory Operations </h3><p><a href=\"https://people.cs.clemson.edu/~rlowe/cs2310/notes/ln_arm_load_store.pdf\">Rose Lowe cs2310 Slideshow</a></p><h4 id=\"g127622\">Store, pre-index <span>(<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=901&amp;zoom=auto,-4,387\">pg 901</a>)</span></h4><pre>1 1 1 1 1 0 0 0 0 0 0 imm9 1 1 Rn5 Rt5\n  *(Rt + imm) &lt;= Rn</pre><p>Reads the address `Rn + imm` from memory and stores it into the address `Rt`.</p><p><span></span></p><hr/><p><b>Is something confusing? Email us!</b><br/>We'd love a chance to help out and improve our documentation.<br/>Our addresses are listed on our GitHub accounts <code>@aaronjanse</code> and <code>@rohantib</code>.</p>\n</body>\n</html>"))