((3) 0 () 21 (" " "(" ")" (q br) (u . "Search Terms") (u . "Peripherals") (u . "UART") (u . "Machine Code Overview") (u . "Encoding") (u . "Registers") (u . "Constants") (u . "Machine Code Operations") (u . "Logical Instructions") (u . "And") (u . "Or") (u . "Xor") (u . "Move") (u . "Move System Register (MSR)") (u . "Load/Store") (u . "Store, Pre-Index") (u . "Store, Post-Index")) () (h - () (metas h - () (here-path u . "/home/ajanse/dev/os-book/documentation.html.pm")) (doc c root c (c body c (c p c (u . "Almost everything you'll need is in the ") c (c a c (c (c href c (u . "https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=1&zoom=auto,-54,848"))) c (u . "ARMv8 Architecture Reference Manual")) c (u . " and ") c (c a c (c (c href c (u . "https://static.docs.arm.com/100095/0003/cortex_a72_mpcore_trm_100095_0003_05_en.pdf#page=1&zoom=auto,-54,848"))) c (u . "Cortex-72A Processor Technical Reference Manual")) c (u . ". I highly recommend downloading a copy of each PDF. Some of their contents are reproduced below.")) c (c h2 c (c (c id c (u . "g74042"))) c (? . 4) c (? . 0)) c (c table c (c tr c (c th c (u . "Term")) c (u . "\n") c (c th c (u . "Definition"))) c (u . "\n") c (c tr c (c td c (u . "cortex-72a")) c (u . "\n") c (c td c (u . "the processor used by the Raspberry Pi 4"))) c (u . "\n") c (c tr c (c td c (u . "broadcom bcm2711")) c (u . "\n") c (c td c (u . "same as above, for our purposes (???)"))) c (u . "\n") c (c tr c (c td c (u . "instruction encoding")) c (u . "\n") c (c td c (u . "the encoding for translating assembly into machine code")))) c (c h2 c (c (c id c (u . "g74043"))) c (? . 5) c (? . 0)) c (c p c (u . "Many peripherals (external io stuff) are accessible through special memory addresses. The Raspberry Pi 4's peripherals document has not yet been released, so for now we'll use the RPi 3's ") c (c a c (c (c href c (u . "https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=1&zoom=auto,-54,848"))) c (u . "BCM2835 ARM Peripherals Manual")) c (u . ".")) c (c h3 c (c (c id c (u . "g74044"))) c (? . 6) c (? . 0)) c (c p c (c a c (c (c href c (u . "https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=175&zoom=110,-110,807"))) c (u . "BCM2835 ARM Peripherals, Page 175"))) c (c p c (c a c (q (href "http://infocenter.arm.com/help/topic/com.arm.doc.ddi0183g/DDI0183G_uart_pl011_r1p5_trm.pdf#page=47&zoom=auto,-29,502")) c (u . "PrimeCell UART Technical Reference Manual"))) c (c p c (c a c (c (c href c (u . "https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=177&zoom=110,-110,280"))) c (u . "Register addresses")) c (u . ", with offset ") c (c code c (u . "0xFE201000")) c (u . " on raspi4")) c (c p c (u . "On QEMU, UART data can be sent/received by simply writing ASCII-encoded text to/from ") c (c code c (u . "0xFE201000")) c (u . ", but on real hardware, you'll need to do some setup first.")) c (c p c (u . "For the following setup steps, use the BCM2836 Peripheral Manual's ") c (c a c (c (c href c (u . "https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=90&zoom=110,-110,652"))) c (u . "GPIO address section")) c (u . ", replacing ") c (c code c (u . "0x7E20")) c (u . " with ") c (c code c (u . "0xFE20")) c (u . " for raspi4.  Also see the manual's ") c (c a c (c (c href c (u . "https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=177&zoom=110,-110,280"))) c (u . "UART address section")) c (u . ".")) c (c ol c (c li c (u . "disable UART using the ") c (c a c (c (c href c (u . "https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=185&zoom=110,-110,325"))) c (u . "UART control register"))) c (u . "\n") c (c li c (u . "disable GPIO pin pull up/down")) c (u . "\n") c (c li c (u . "delay for 150 cycles (create a loop with a countdown)")) c (u . "\n") c (c li c (u . "disable GPIO pin pull up/down clock 0")) c (u . "\n") c (c li c (u . "delay for 150 cycles")) c (u . "\n") c (c li c (u . "disable GPIO pin pull up/down clock 0 (yeah, again; idk why)")) c (u . "\n") c (c li c (u . "clear all pending interrupts using the ") c (c a c (c (c href c (u . "https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=192&zoom=110,-70,735"))) c (u . "UART interrupt clear register")) c (u . " (write zero to the bits representing each interrupt you want to clear)")) c (u . "\n") c (c li c (u . "set baud rate to 115200 given a 3 Mhz clock (follow the PrimeCell UART Manual's ") c (c a c (q (href "http://infocenter.arm.com/help/topic/com.arm.doc.ddi0183g/DDI0183G_uart_pl011_r1p5_trm.pdf#page=56&zoom=auto,-29,199")) c (u . "baud rate calculation example")) c (u . ")") c (u . "\n") c (c ul c (c li c (u . "write the baud rate divisor integer (") c (c code c (u . "BDR_I")) c (u . ") to the ") c (c a c (c (c href c (u . "https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=183&zoom=110,-70,479"))) c (u . "UART integer baud rate divisor register"))) c (u . "\n") c (c li c (u . "write the calculated fractional part (") c (c code c (u . "m")) c (u . ") to the ") c (c a c (c (c href c (u . "https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=183&zoom=110,-110,255"))) c (u . "UART fractional baud rate divisor register"))))) c (u . "\n") c (c li c (u . "enable FIFO and 8-bit data transmission using the ") c (c a c (c (c href c (u . "https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=184&zoom=110,-70,645"))) c (u . "UART line control register"))) c (u . "\n") c (c li c (u . "mask all interrupts using the [TODO...]"))) c (c h2 c (c (c id c (u . "g74045"))) c (? . 7) c (? . 0)) c (c h3 c (c (c id c (u . "g74046"))) c (? . 8) c (? . 0) c (c span c (? . 1) c (c a c (c (c href c (u . "https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=223&zoom=auto,-4,576"))) c (u . "pg 223")) c (? . 2))) c (c p c (u . "Very few people venture below assembly to machine code, so most machine code is described in terms of the equivalent assembly.")) c (c p c (u . "For example, let's say we wanted to execute ") c (c code c (u . "r7 <- r2 + 16")) c (u . ". We first find the ") c (c code c (u . "add")) c (u . " instruction in the ARMv8 Manual or via the documentation below. We see that the encoding for 64-bit ") c (c code c (u . "add")) c (u . " is as follows: (") c (c a c (c (c href c (u . "https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=531&zoom=auto,-4,730"))) c (u . "pg 521")) c (u . ")")) c (c pre c (u . "sf 0 0 1 0 0 0 1 shift2 imm12 Rn Rd")) c (c p c (u . "Note the numbers after some variable names; they indicate how many bits wide their encodings are.")) c (c p c (u . "In our case, to do ") c (c code c (u . "r7 <- r2 + 16")) c (u . ", we calculate the following:")) c (c pre c (u . "sf = 1") c (u . "\n") c (u . "shift = 00") c (u . "\n") c (u . "imm = 000000010000") c (u . "\n") c (u . "Rn = r2 = 00010") c (u . "\n") c (u . "Rd = r7 = 00111")) c (c p c (u . "Therefore, our fully encoded instruction is: (whitespace added for clarity)")) c (c pre c (u . "1 0 0 1 0 0 0 1 00 000000010000 00010 00111")) c (c h3 c (c (c id c (u . "g74047"))) c (? . 9) c (? . 0) c (c span c (? . 1) c (c a c (c (c href c (u . "https://static.docs.arm.com/100095/0003/cortex_a72_mpcore_trm_100095_0003_05_en.pdf#page=75&zoom=auto,-12,749"))) c (u . "pg 75")) c (? . 2))) c (c p c (u . "These are the fastest place to store data. Most machine code instructions involve registers and moving data to/from/between them.")) c (c table c (c tr c (c th c (u . "Register")) c (u . "\n") c (c th c (u . "Description"))) c (u . "\n") c (c tr c (c td c (c a c (c (c href c (u . "https://static.docs.arm.com/100095/0003/cortex_a72_mpcore_trm_100095_0003_05_en.pdf#page=90&zoom=auto,-12,258"))) c (c code c (u . "MPIDR_EL1")))) c (u . "\n") c (c td c (u . "This read-only identification register, among other things, provides a core identification number (") c (c a c (c (c href c (u . "https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=2620&zoom=110,-33,627"))) c (u . "how to access")) c (u . ")"))) c (u . "\n") c (c tr c (c td c (c code c (u . "r0")) c (u . " to ") c (c code c (u . "r15"))) c (u . "\n") c (c td c (u . "General-purpose registers. Because we're writing our own assembly language, feel free to use these however you want")))) c (c h3 c (c (c id c (u . "g74048"))) c (? . 10) c (? . 0) c (c span c (? . 1) c "\"immediate\" values" c (? . 2))) c (c p c (u . "The aarch64 instruction encoding is 32 bits wide, so we cannot store large constants into registers in a single command. Instead, we use multiple commands to store the constant, such as ") c (c code c (u . "mov")) c (u . " with a bit shift followed by one or more ") c (c code c (u . "add")) c (u . " instructions.")) c (c h2 c (c (c id c (u . "g74049"))) c (? . 11) c (? . 0)) c (c h3 c (c (c id c (u . "g74050"))) c (? . 12) c (? . 0) c (c span c (? . 1) c (c a c (c (c href c (u . "https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=226&zoom=auto,-54,848"))) c (u . "pg 226")) c (? . 2))) c (c p c (u . "I won't explain all of these here, but know that ") c (c code c (u . "xor")) c (u . " is also known as ") c (c code c (u . "eor")) c (u . ".")) c (c h4 c (c (c id c (u . "g74051"))) c (? . 13) c (? . 0)) c (c h4 c (c (c id c (u . "g74052"))) c (? . 14) c (? . 0)) c (c h4 c (c (c id c (u . "g74053"))) c (? . 15) c (? . 0)) c (c h3 c (c (c id c (u . "g74054"))) c (? . 16) c (? . 0)) c (c p c (u . "This instruction family copies into a register either a constant or the value of another register.")) c (c h4 c (c (c id c (u . "g74055"))) c (? . 17) c (? . 0) c (c span c (? . 1) c (c a c (c (c href c (u . "https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=802&zoom=auto,-54,848"))) c (u . "pg 802")) c (? . 2))) c (c p c (u . "See the register summaries above for the parameters needed to access a specific system register.")) c (c h4 c (c (c id c (u . "g74056"))) c (? . 18) c (? . 0)) c (c p c (c a c (q (href "https://people.cs.clemson.edu/~rlowe/cs2310/notes/ln_arm_load_store.pdf")) c (u . "Rose Lowe cs2310 Slideshow"))) c (c h4 c (c (c id c (u . "g74057"))) c (? . 19) c (? . 0) c (c span c (? . 1) c (c a c (c (c href c (u . "https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=901&zoom=auto,-4,387"))) c (u . "pg 901")) c (? . 2))) c (c p c (u . "Reads the address `Rn + imm` from memory and stores it into `Rt`.")) c (c p c (u . "```") c (? . 3) c (u . "Rt <- *(Rn + imm)") c (? . 3) c (u . "```")) c (c h4 c (c (c id c (u . "g74058"))) c (? . 20) c (? . 0) c (c span c (? . 1) c (c a c (c (c href c (u . "https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=901&zoom=auto,-4,655"))) c (u . "pg 901")) c (? . 2))) c (c p c (u . "Reads the address `Rn` from memory stores it into `Rt`, then updates `Rn` to `Rn + imm`.")) c (c p c (u . "```") c (? . 3) c (u . "Rt <- *Rn") c (? . 3) c (u . " ") c (u . "Rn <- Rn + imm") c (? . 3) c (u . "```"))) c (c toc-entries c (c div c (c (c class c (u . "nav2"))) c (c a c (c (c href c (u . "#g74042"))) c (? . 4))) c (c div c (c (c class c (u . "nav2"))) c (c a c (c (c href c (u . "#g74043"))) c (? . 5))) c (c div c (c (c class c (u . "nav3"))) c (c a c (c (c href c (u . "#g74044"))) c (? . 6))) c (c div c (c (c class c (u . "nav2"))) c (c a c (c (c href c (u . "#g74045"))) c (? . 7))) c (c div c (c (c class c (u . "nav3"))) c (c a c (c (c href c (u . "#g74046"))) c (? . 8))) c (c div c (c (c class c (u . "nav3"))) c (c a c (c (c href c (u . "#g74047"))) c (? . 9))) c (c div c (c (c class c (u . "nav3"))) c (c a c (c (c href c (u . "#g74048"))) c (? . 10))) c (c div c (c (c class c (u . "nav2"))) c (c a c (c (c href c (u . "#g74049"))) c (? . 11))) c (c div c (c (c class c (u . "nav3"))) c (c a c (c (c href c (u . "#g74050"))) c (? . 12))) c (c div c (c (c class c (u . "nav4"))) c (c a c (c (c href c (u . "#g74051"))) c (? . 13))) c (c div c (c (c class c (u . "nav4"))) c (c a c (c (c href c (u . "#g74052"))) c (? . 14))) c (c div c (c (c class c (u . "nav4"))) c (c a c (c (c href c (u . "#g74053"))) c (? . 15))) c (c div c (c (c class c (u . "nav3"))) c (c a c (c (c href c (u . "#g74054"))) c (? . 16))) c (c div c (c (c class c (u . "nav4"))) c (c a c (c (c href c (u . "#g74055"))) c (? . 17))) c (c div c (c (c class c (u . "nav4"))) c (c a c (c (c href c (u . "#g74056"))) c (? . 18))) c (c div c (c (c class c (u . "nav4"))) c (c a c (c (c href c (u . "#g74057"))) c (? . 19))) c (c div c (c (c class c (u . "nav4"))) c (c a c (c (c href c (u . "#g74058"))) c (? . 20)))))))