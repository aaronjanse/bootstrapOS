((3) 0 () 0 () () (u . "<html>\n<head>\n        <meta charset=\"UTF-8\"/>\n        <link href=\"https://fonts.googleapis.com/css?family=Crimson+Text&display=swap\" rel=\"stylesheet\">\n        <style>\n                * {\n                        font-family: 'Crimson Text', serif;\n                }\n                #toc {\n                        position: absolute;\n                        left: 2em;\n                }\n                a {\n                        color: #3467ff;\n                }\n\n                th:nth-of-type(2) {\n                        text-align: left;\n                }\n\n                td,th{\n                        border-left: 10px solid rgba(0,0,0,0);\n                }\n\n                tr td:first-child, tr th:first-child {\n                        text-align: right;\n                        border:0px;\n                }\n\n    code {\n        font-family: monospace;\n        font-size: 14px;\n        background: #dcdcf9;\n        border-radius: 5px;\n        padding-left: 4px;\n        padding-right: 4px;\n    }\n    a {\n        text-decoration: none;\n    }\n                p, li {\n                        font-size: 19px;\n                }\n                p {\n                        margin-bottom: 0.5em;\n                }\n                ol {\n                        margin-top: 0;\n                }\n    #toc div a span {\n        display: none;\n    }\n    pre {\n        font-family: monospace;\n        white-space: pre-line;\n        padding: 1em;\n        border-radius: 3px;\n        background-color: #dcdcf9;\n    }\n                /*i, em, b {\n                        font-family: inherit;\n                }*/\n                body {\n                        margin-left: 30%;\n                        margin-top: 5%;\n                        width: 60%;\n                }\n                .nav3 {\n                        padding-left: 1em;\n                }\n         body {counter-reset: h2}\n  h2, .nav2 {counter-reset: h3}\n  h3 {counter-reset: h4}\n  h4 {counter-reset: h5}\n  h5 {counter-reset: h6}\n\n  h2:before, .nav2:before {counter-increment: h2; content: counter(h2) \". \"}\n  h3:before {counter-increment: h3; content: counter(h2) \".\" counter(h3) \". \"}\n  h4:before {counter-increment: h4; content: counter(h2) \".\" counter(h3) \".\" counter(h4) \". \"}\n  h5:before {counter-increment: h5; content: counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \". \"}\n  h6:before {counter-increment: h6; content: counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \".\" counter(h6) \". \"; counter-increment: h4counter; }\n                #toc a, #toc a .nav2:before {\n                        color: #404040;\n                        font-weight: bold;\n                }\n\n        </style>\n</head>\n<body style=\"background: #f6f6f6\">\n<div id=\"toc\"><div class=\"nav2\"><a href=\"#g69303\">Search Terms</a></div><div class=\"nav2\"><a href=\"#g69304\">Peripherals</a></div><div class=\"nav3\"><a href=\"#g69305\">UART</a></div><div class=\"nav2\"><a href=\"#g69306\">Machine Code</a></div><div class=\"nav3\"><a href=\"#g69307\">Storage</a></div><div class=\"nav4\"><a href=\"#g69308\">Registers</a></div><div class=\"nav3\"><a href=\"#g69309\">Instructions</a></div><div class=\"nav4\"><a href=\"#g69310\">Encoding</a></div><div class=\"nav4\"><a href=\"#g69311\">Constants</a></div><div class=\"nav4\"><a href=\"#g69312\">Logical Instructions (and/or/xor/etc) </a></div><div class=\"nav4\"><a href=\"#g69313\">Move</a></div><div class=\"nav4\"><a href=\"#g69314\">Move System Register (MSR)</a></div><div class=\"nav4\"><a href=\"#g69315\">Load/Store</a></div><div class=\"nav4\"><a href=\"#g69316\">Store, Pre-Index</a></div><div class=\"nav4\"><a href=\"#g69317\">Store, Post-Index</a></div></div>\n\n  <p>Almost everything you'll need is in the <a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=1&amp;zoom=auto,-54,848\">ARMv8 Architecture Reference Manual</a> and <a href=\"https://static.docs.arm.com/100095/0003/cortex_a72_mpcore_trm_100095_0003_05_en.pdf#page=1&amp;zoom=auto,-54,848\">Cortex-72A Processor Technical Reference Manual</a>. I highly recommend downloading a copy of each PDF. Some of their contents are reproduced below.</p><h2 id=\"g69303\">Search Terms </h2><table><tr><th>Term</th>\n  <th>Definition</th></tr>\n  <tr><td>cortex-72a</td>\n  <td>the processor used by the Raspberry Pi 4</td></tr>\n  <tr><td>broadcom bcm2711</td>\n  <td>same as above, for our purposes (???)</td></tr>\n  <tr><td>instruction encoding</td>\n  <td>the encoding for translating assembly into machine code</td></tr></table><h2 id=\"g69304\">Peripherals </h2><p>Many peripherals (external io stuff) are accessible through special memory addresses. The Raspberry Pi 4's peripherals document has not yet been released, so for now we'll use the RPi 3's <a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=1&amp;zoom=auto,-54,848\">BCM2835 ARM Peripherals Manual</a>.</p><h3 id=\"g69305\">UART </h3><p><a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=175&amp;zoom=110,-110,807\">BCM2835 ARM Peripherals, Page 175</a></p><p><a href=\"http://infocenter.arm.com/help/topic/com.arm.doc.ddi0183g/DDI0183G_uart_pl011_r1p5_trm.pdf#page=47&amp;zoom=auto,-29,502\">PrimeCell UART Technical Reference Manual</a></p><p><a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=177&amp;zoom=110,-110,280\">Register addresses</a>, with offset <code>0xFE201000</code> on raspi4</p><p>On QEMU, UART data can be sent/received by simply writing ASCII-encoded text to/from <code>0xFE201000</code>, but on real hardware, you'll need to do some setup first.</p><p>For the following setup steps, use the BCM2836 Peripheral Manual's <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=90&amp;zoom=110,-110,652\">GPIO address section</a>, replacing <code>0x7E20</code> with <code>0xFE20</code> for raspi4.  Also see the manual's <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=177&amp;zoom=110,-110,280\">UART address section</a>.</p><ol><li>disable UART using the <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=185&amp;zoom=110,-110,325\">UART control register</a></li>\n  <li>disable GPIO pin pull up/down</li>\n  <li>delay for 150 cycles (create a loop with a countdown)</li>\n  <li>disable GPIO pin pull up/down clock 0</li>\n  <li>delay for 150 cycles</li>\n  <li>disable GPIO pin pull up/down clock 0 (yeah, again; idk why)</li>\n  <li>clear all pending interrupts using the <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=192&amp;zoom=110,-70,735\">UART interrupt clear register</a> (write zero to the bits representing each interrupt you want to clear)</li>\n  <li>set baud rate to 115200 given a 3 Mhz clock (follow the PrimeCell UART Manual's <a href=\"http://infocenter.arm.com/help/topic/com.arm.doc.ddi0183g/DDI0183G_uart_pl011_r1p5_trm.pdf#page=56&amp;zoom=auto,-29,199\">baud rate calculation example</a>)\n  <ul><li>write the baud rate divisor integer (<code>BDR_I</code>) to the <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=183&amp;zoom=110,-70,479\">UART integer baud rate divisor register</a></li>\n  <li>write the calculated fractional part (<code>m</code>) to the <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=183&amp;zoom=110,-110,255\">UART fractional baud rate divisor register</a></li></ul></li>\n  <li>enable FIFO and 8-bit data transmission using the <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=184&amp;zoom=110,-70,645\">UART line control register</a></li>\n  <li>mask all interrupts using the [TODO...]</li></ol><h2 id=\"g69306\">Machine Code </h2><h3 id=\"g69307\">Storage </h3><h4 id=\"g69308\">Registers <span>(<a href=\"https://static.docs.arm.com/100095/0003/cortex_a72_mpcore_trm_100095_0003_05_en.pdf#page=75&amp;zoom=auto,-12,749\">pg 75</a>)</span></h4><p>These are the fastest place to store data. Most machine code instructions involve registers and moving data to/from/between them.</p><table><tr><th>Register</th>\n  <th>Description</th></tr>\n  <tr><td><a href=\"https://static.docs.arm.com/100095/0003/cortex_a72_mpcore_trm_100095_0003_05_en.pdf#page=90&amp;zoom=auto,-12,258\"><code>MPIDR_EL1</code></a></td>\n  <td>This read-only identification register, among other things, provides a core identification number (<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=2620&amp;zoom=110,-33,627\">how to access</a>)</td></tr>\n  <tr><td><code>r0</code> to <code>r15</code></td>\n  <td>General-purpose registers. Because we're writing our own assembly language, feel free to use these however you want</td></tr></table><h3 id=\"g69309\">Instructions </h3><h4 id=\"g69310\">Encoding <span>(<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=223&amp;zoom=auto,-4,576\">pg 223</a>)</span></h4><p>Very few people venture below assembly to machine code, so most machine code is described in terms of the equivalent assembly.</p><p>For example, let's say we wanted to execute <code>r7 &lt;- r2 + 16</code>. We first find the <code>add</code> instruction in the ARMv8 Manual or via the documentation below. We see that the encoding for 64-bit <code>add</code> is as follows: (<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=531&amp;zoom=auto,-4,730\">pg 521</a>)</p><pre>sf 0 0 1 0 0 0 1 shift2 imm12 Rn Rd</pre><p>Note the numbers after some variable names; they indicate how many bits wide their encodings are.</p><p>In our case, to do <code>r7 &lt;- r2 + 16</code>, we calculate the following:</p><pre>sf = 1\n  shift = 00\n  imm = 000000010000\n  Rn = r2 = 00010\n  Rd = r7 = 00111</pre><p>Therefore, our fully encoded instruction is: (whitespace added for clarity)</p><pre>1 0 0 1 0 0 0 1 00 000000010000 00010 00111</pre><h4 id=\"g69311\">Constants <span>(\"immediate\" values)</span></h4><p>The aarch64 instruction encoding is 32 bits wide, so we cannot store large constants into registers in a single command. Instead, we use multiple commands to store the constant, such as <code>mov</code> with a bit shift followed by one or more <code>add</code> instructions.</p><h4 id=\"g69312\">Logical Instructions (and/or/xor/etc)  <span>(<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=226&amp;zoom=auto,-54,848\">pg 226</a>)</span></h4><p>I won't explain all of these here, but know that <code>xor</code> is also known as <code>eor</code>.</p><h4 id=\"g69313\">Move </h4><p>This instruction family copies into a register either a constant or the value of another register.</p><h4 id=\"g69314\">Move System Register (MSR) <span>(<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=802&amp;zoom=auto,-54,848\">pg 802</a>)</span></h4><p>See the register summaries above for the parameters needed to access a specific system register.</p><h4 id=\"g69315\">Load/Store </h4><p><a href=\"https://people.cs.clemson.edu/~rlowe/cs2310/notes/ln_arm_load_store.pdf\">Rose Lowe cs2310 Slideshow</a></p><h4 id=\"g69316\">Store, Pre-Index <span>(<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=901&amp;zoom=auto,-4,387\">pg 901</a>)</span></h4><p>Reads the address `Rn + imm` from memory and stores it into `Rt`.</p><p>```<br/>Rt &lt;- *(Rn + imm)<br/>```</p><h4 id=\"g69317\">Store, Post-Index <span>(<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=901&amp;zoom=auto,-4,655\">pg 901</a>)</span></h4><p>Reads the address `Rn` from memory stores it into `Rt`, then updates `Rn` to `Rn + imm`.</p><p>```<br/>Rt &lt;- *Rn<br/> Rn &lt;- Rn + imm<br/>```</p>\n</body>\n</html>"))