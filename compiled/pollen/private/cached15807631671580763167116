((3) 0 () 0 () () (u . "<html>\n<head>\n        <meta charset=\"UTF-8\"/>\n        <style>\n                p {\n                        font-family: sans-serif;\n                }\n                /*i, em, b {\n                        font-family: inherit;\n                }*/\n                body {\n                        margin: auto;\n                        margin-top: 5%;\n                        width: 60%;\n                }\n                .nav3 {\n                        padding-left: 1em;\n                }\n        </style>\n</head>\n<body style=\"background: #f6f6f6\">\n<div><h2>Table of Contents</h2><div class=\"nav2\"><a href=\"#g7548\">Search Terms</a></div><div class=\"nav2\"><a href=\"#g7549\">Registers</a></div><div class=\"nav2\"><a href=\"#g7550\">Peripherals</a></div><div class=\"nav3\"><a href=\"#g7551\">UART</a></div></div>\n  <br>\n  <br>\n  <p>Almost everything you'll need is in the <a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=1&amp;zoom=auto,-54,848\">ARMv8 Architecture Reference Manual</a> and [Cortex-72A Processor Technical Reference Manual][cortex72a-trm]. I highly recommend downloading a copy of each PDF. Some of their contents are reproduced below.</p><p>[armv8-arm]: https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf<br/>[cortex72a-trm]: https://static.docs.arm.com/100095/0003/cortex_a72_mpcore_trm_100095_0003_05_en.pdf</p><h2 id=\"g7548\">Search Terms</h2><p>| Term | Definition<br/>|------|------------<br/>| cortex-72a | the processor used by the Raspberry Pi 4<br/>| broadcom bcm2711 | same as above (???)<br/>| instruction encoding | the encoding for translating assembly into machine code</p><h2 id=\"g7549\">Registers</h2><p>[Cortex-72A Manual, Page 75](https://static.docs.arm.com/100095/0003/cortex_a72_mpcore_trm_100095_0003_05_en.pdf#page=75&amp;zoom=auto,-12,749)</p><p>This is the fastest place to store data.</p><p>| Register | Description<br/>|----------|-------------<br/>| [MPIDR_EL1](https://static.docs.arm.com/100095/0003/cortex_a72_mpcore_trm_100095_0003_05_en.pdf#page=90&amp;zoom=auto,-12,258) | This read-only identification register, among other things, provides a core identification number (<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=2620&amp;zoom=110,-33,627\">how to access</a>)<br/>| r0-15 | General-purpose registers. Because we're writing our own assembly language, feel free to use these however you want</p><h2 id=\"g7550\">Peripherals</h2><p>Many peripherals (external io stuff) are accessible through special memory addresses. The Raspberry Pi 4's peripherals document has not yet been released, so for now we'll use the RPi 3's [BCM2835 ARM Peripherals Manual](https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf).</p><h3 id=\"g7551\">UART</h3><p>[BCM2835 ARM Peripherals, Page 175](https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=175&amp;zoom=110,-110,807)<br/>[PrimeCell UART Technical Reference Manual](http://infocenter.arm.com/help/topic/com.arm.doc.ddi0183g/DDI0183G_uart_pl011_r1p5_trm.pdf#page=47&amp;zoom=auto,-29,502)</p><p>[Register addresses](https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=177&amp;zoom=110,-110,280), with offset `0xFE201000` on raspi4</p><p>On QEMU, UART data can be sent/received by simply writing to/from `0xFE201000+0`, but on real hardware, you'll need to do some setup first.</p><p>For the following setup steps, use the BCM2836 Peripheral Manual's [GPIO address section](https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=90&amp;zoom=110,-110,652), replacing `0x7E20` with `0xFE20` for the raspi4.  Also see the manual's [UART address section](https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=177&amp;zoom=110,-110,280).<br/>1. disable UART using the [UART control register](https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=185&amp;zoom=110,-110,325)<br/>2. disable GPIO pin pull up/down<br/>3. delay for 150 cycles (create a loop with a countdown)<br/>4. disable GPIO pin pull up/down clock 0<br/>5. delay for 150 cycles<br/>6. disable GPIO pin pull up/down clock 0 (yeah, again; idk why)<br/>7. clear all pending interrupts using the [UART interrupt clear register](https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=192&amp;zoom=110,-70,735) (write zero to the bits representing each interrupt you want to clear)<br/>8. set baud rate to 115200 given a 3 Mhz clock (follow the PrimeCell UART Manual's [baud rate calculation example](http://infocenter.arm.com/help/topic/com.arm.doc.ddi0183g/DDI0183G_uart_pl011_r1p5_trm.pdf#page=56&amp;zoom=auto,-29,199))<br/>   1. write the baud rate divisor integer (BDR_I) to the [UART integer baud rate divisor register](https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=183&amp;zoom=110,-70,479)<br/>   2. write the calculated fractional part (m) to the [UART fractional baud rate divisor register](https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=183&amp;zoom=110,-110,255)<br/>9. enable FIFO and 8-bit data transmission using the [UART line control register](https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=184&amp;zoom=110,-70,645)<br/>10. mask all interrupts using the [TODO...]</p><p>## Instructions</p><p><a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=223&amp;zoom=auto,-4,576\">ARMv8 Manual, Page 223</a></p><p>### Misc</p><p>#### Constants (\"immediate\" values)</p><p>The aarch64 instruction encoding is 32 bits wide, so we cannot store large constants into registers in a single command.</p><p>#### Logic Instructions (and/or/xor/etc)</p><p>[ARMv8 Manual, Page 226](https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=226)</p><p>#### Move System Register (MSR)</p><p><a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=802&amp;zoom=auto,-54,848\">ARMv8 Manual, Page 802</a><br/>[ARMv8 Manual, Page 802](https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=802)</p><p>See the register summaries above for the parameters needed to access a specific system register.</p><p>### Load/Store<br/>&gt; [Rose Lowe cs2310 Slideshow](https://people.cs.clemson.edu/~rlowe/cs2310/notes/ln_arm_load_store.pdf)</p><p>#### Store, Pre-Index</p><p>[ARMv8 Manual, Page 901](https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=901&amp;zoom=auto,-4,387)</p><p>```<br/>31                  21 20             12 11 10 9     6           0<br/>vv                   v v               v     v     vv          vv<br/>'F'E'D'C'B'A'9'8'7'6'5'4'3'2'1'0 F E D C B A 9 8 7 6 5 4 3 2 1 0</p><p> 1 1 1 1 1 0 0 0 0 0 0 [ imm          9] 1 1 [ Rn   5][ Rt    5]<br/>```</p><p>Reads the address `Rn + imm` from memory and stores it into `Rt`.</p><p>```<br/>Rt &lt;- *(Rn + imm)<br/>```</p><p>#### Store, Post-Index<br/>&gt; [ARMv8 Manual, Page 901](https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=901&amp;zoom=auto,-4,655)</p><p>Reads the address `Rn` from memory stores it into `Rt`, then updates `Rn` to `Rn + imm`.</p><p>```<br/>Rt &lt;- *Rn<br/>Rn &lt;- Rn + imm<br/>```</p>\n</body>\n</html>"))