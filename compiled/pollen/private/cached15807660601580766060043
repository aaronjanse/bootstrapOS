((3) 0 () 0 () () (u . "<html>\n<head>\n        <meta charset=\"UTF-8\"/>\n        <link href=\"https://fonts.googleapis.com/css?family=Crimson+Text&display=swap\" rel=\"stylesheet\">\n        <style>\n                * {\n                        font-family: 'Crimson Text', serif;\n                }\n\n    code {\n        font-family: monospace;\n        font-size: 14px;\n        background: #dcdcf9;\n        border-radius: 5px;\n        padding-left: 4px;\n        padding-right: 4px;\n    }\n    a {\n        text-decoration: none;\n    }\n                p, li {\n                        font-size: 19px;\n                }\n                p {\n                        margin-bottom: 0.5em;\n                }\n                ol {\n                        margin-top: 0;\n                }\n                /*i, em, b {\n                        font-family: inherit;\n                }*/\n                body {\n                        margin: auto;\n                        margin-top: 5%;\n                        width: 60%;\n                }\n                .nav3 {\n                        padding-left: 1em;\n                }\n         body {counter-reset: h2}\n  h2 {counter-reset: h3}\n  h3 {counter-reset: h4}\n  h4 {counter-reset: h5}\n  h5 {counter-reset: h6}\n\n  h2:before {counter-increment: h2; content: counter(h2) \". \"}\n  h3:before {counter-increment: h3; content: counter(h2) \".\" counter(h3) \". \"}\n  h4:before {counter-increment: h4; content: counter(h2) \".\" counter(h3) \".\" counter(h4) \". \"}\n  h5:before {counter-increment: h5; content: counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \". \"}\n  h6:before {counter-increment: h6; content: counter(h2) \".\" counter(h3) \".\" counter(h4) \".\" counter(h5) \".\" counter(h6) \". \"}counter-increment: h4counter;\n    }\n        </style>\n</head>\n<body style=\"background: #f6f6f6\">\n<div><h2>Table of Contents</h2><div class=\"nav2\"><a href=\"#g37373\">Search Terms</a></div><div class=\"nav2\"><a href=\"#g37374\">Peripherals</a></div><div class=\"nav3\"><a href=\"#g37375\">UART</a></div><div class=\"nav2\"><a href=\"#g37376\">Machine Code</a></div><div class=\"nav3\"><a href=\"#g37377\">Registers</a></div><div class=\"nav3\"><a href=\"#g37378\">Instructions</a></div><div class=\"nav4\"><a href=\"#g37379\">Constants (\"immediate\" values)</a></div><div class=\"nav4\"><a href=\"#g37380\">Logical Instructions (and/or/xor/etc) (<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=226&amp;zoom=auto,-54,848\">pg 226</a>)</a></div><div class=\"nav4\"><a href=\"#g37381\">Move</a></div><div class=\"nav4\"><a href=\"#g37382\">Move System Register (MSR) (<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=802&amp;zoom=auto,-54,848\">pg 802</a>)</a></div><div class=\"nav4\"><a href=\"#g37383\">Load/Store</a></div><div class=\"nav4\"><a href=\"#g37384\">Store, Pre-Index (<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=901&amp;zoom=auto,-4,387\">pg 901</a>)</a></div><div class=\"nav4\"><a href=\"#g37385\">Store, Post-Index (<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=901&amp;zoom=auto,-4,655\">pg 901</a>)</a></div></div>\n  <br>\n  <br>\n  <p>Almost everything you'll need is in the <a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=1&amp;zoom=auto,-54,848\">ARMv8 Architecture Reference Manual</a> and [Cortex-72A Processor Technical Reference Manual][cortex72a-trm]. I highly recommend downloading a copy of each PDF. Some of their contents are reproduced below.</p><p>[armv8-arm]: https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf<br/>[cortex72a-trm]: https://static.docs.arm.com/100095/0003/cortex_a72_mpcore_trm_100095_0003_05_en.pdf</p><h2 id=\"g37373\">Search Terms</h2><p>| Term | Definition<br/>|------|------------<br/>| cortex-72a | the processor used by the Raspberry Pi 4<br/>| broadcom bcm2711 | same as above (???)<br/>| instruction encoding | the encoding for translating assembly into machine code</p><h2 id=\"g37374\">Peripherals</h2><p>Many peripherals (external io stuff) are accessible through special memory addresses. The Raspberry Pi 4's peripherals document has not yet been released, so for now we'll use the RPi 3's <a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=1&amp;zoom=auto,-54,848\">BCM2835 ARM Peripherals Manual</a>.</p><h3 id=\"g37375\">UART</h3><p><a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=175&amp;zoom=110,-110,807\">BCM2835 ARM Peripherals, Page 175</a></p><p><a href=\"http://infocenter.arm.com/help/topic/com.arm.doc.ddi0183g/DDI0183G_uart_pl011_r1p5_trm.pdf#page=47&amp;zoom=auto,-29,502\">PrimeCell UART Technical Reference Manual</a></p><p><a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=177&amp;zoom=110,-110,280\">Register addresses</a>, with offset <code>0xFE201000</code> on raspi4</p><p>On QEMU, UART data can be sent/received by simply writing to/from <code>0xFE201000+0</code>, but on real hardware, you'll need to do some setup first.</p><p>For the following setup steps, use the BCM2836 Peripheral Manual's <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=90&amp;zoom=110,-110,652\">GPIO address section</a>, replacing <code>0x7E20</code> with <code>0xFE20</code> for raspi4.  Also see the manual's <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=177&amp;zoom=110,-110,280\">UART address section</a>.</p><ol><li>disable UART using the <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=185&amp;zoom=110,-110,325\">UART control register</a></li>\n  <li>disable GPIO pin pull up/down</li>\n  <li>delay for 150 cycles (create a loop with a countdown)</li>\n  <li>disable GPIO pin pull up/down clock 0</li>\n  <li>delay for 150 cycles</li>\n  <li>disable GPIO pin pull up/down clock 0 (yeah, again; idk why)</li>\n  <li>clear all pending interrupts using the <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=192&amp;zoom=110,-70,735\">UART interrupt clear register</a> (write zero to the bits representing each interrupt you want to clear)</li>\n  <li>set baud rate to 115200 given a 3 Mhz clock (follow the PrimeCell UART Manual's <a href=\"http://infocenter.arm.com/help/topic/com.arm.doc.ddi0183g/DDI0183G_uart_pl011_r1p5_trm.pdf#page=56&amp;zoom=auto,-29,199\">baud rate calculation example</a>)\n  <ul><li>write the baud rate divisor integer (<code>BDR_I</code>) to the <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=183&amp;zoom=110,-70,479\">UART integer baud rate divisor register</a></li>\n  <li>write the calculated fractional part (<code>m</code>) to the <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=183&amp;zoom=110,-110,255\">UART fractional baud rate divisor register</a></li></ul></li>\n  <li>enable FIFO and 8-bit data transmission using the <a href=\"https://www.raspberrypi.org/app/uploads/2012/02/BCM2835-ARM-Peripherals.pdf#page=184&amp;zoom=110,-70,645\">UART line control register</a></li>\n  <li>mask all interrupts using the [TODO...]</li></ol><h2 id=\"g37376\">Machine Code</h2><h3 id=\"g37377\">Registers</h3><p>[Cortex-72A Manual, Page 75](https://static.docs.arm.com/100095/0003/cortex_a72_mpcore_trm_100095_0003_05_en.pdf#page=75&amp;zoom=auto,-12,749)</p><p>This is the fastest place to store data.</p><p>| Register | Description<br/>|----------|-------------<br/>| [MPIDR_EL1](https://static.docs.arm.com/100095/0003/cortex_a72_mpcore_trm_100095_0003_05_en.pdf#page=90&amp;zoom=auto,-12,258) | This read-only identification register, among other things, provides a core identification number (<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=2620&amp;zoom=110,-33,627\">how to access</a>)<br/>| r0-15 | General-purpose registers. Because we're writing our own assembly language, feel free to use these however you want</p><p><a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=223&amp;zoom=auto,-4,576\">ARMv8 Manual, Page 223</a></p><h3 id=\"g37378\">Instructions</h3><h4 id=\"g37379\">Constants (\"immediate\" values)</h4><p>The aarch64 instruction encoding is 32 bits wide, so we cannot store large constants into registers in a single command. Instead, we use multiple commands to store the constant, such as <code>mov</code> with a bit shift followed by one or more <code>add</code> instructions.</p><h4 id=\"g37380\">Logical Instructions (and/or/xor/etc) (<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=226&amp;zoom=auto,-54,848\">pg 226</a>)</h4><p>I won't explain all of these here, but know that <code>xor</code> is also known as <code>eor</code>.</p><h4 id=\"g37381\">Move</h4><p>This instruction family copies into a register either a constant or the value of another register.</p><h4 id=\"g37382\">Move System Register (MSR) (<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=802&amp;zoom=auto,-54,848\">pg 802</a>)</h4><p>See the register summaries above for the parameters needed to access a specific system register.</p><h4 id=\"g37383\">Load/Store</h4><p><a href=\"https://people.cs.clemson.edu/~rlowe/cs2310/notes/ln_arm_load_store.pdf\">Rose Lowe cs2310 Slideshow</a></p><h4 id=\"g37384\">Store, Pre-Index (<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=901&amp;zoom=auto,-4,387\">pg 901</a>)</h4><p>Reads the address `Rn + imm` from memory and stores it into `Rt`.</p><p>```<br/>Rt &lt;- *(Rn + imm)<br/>```</p><h4 id=\"g37385\">Store, Post-Index (<a href=\"https://static.docs.arm.com/ddi0487/ca/DDI0487C_a_armv8_arm.pdf#page=901&amp;zoom=auto,-4,655\">pg 901</a>)</h4><p>Reads the address `Rn` from memory stores it into `Rt`, then updates `Rn` to `Rn + imm`.</p><p>```<br/>Rt &lt;- *Rn<br/> Rn &lt;- Rn + imm<br/>```</p>\n</body>\n</html>"))